//interfejs Scena, kontrolowanie tego co jest wyswietlane; wpisane przykładowe wartości:

import java.awt.image.ImageObserver;

public interface Stage extends ImageObserver {
public static final int SZEROKOSC = 800;
public static final int WYSOKOSC = 600;
public static final int WYSOKOSC_GRY = 500; //obszar, na którym toczy się gra; na dole podostaje część do komunikatów
public SpriteCache getSpriteCache(); 
public void addActor(Actor a);
public Player getPlayer(); //dostęp do atrybutów klasy Player z Monster
public void Quit();    //możliwość kończenia gry
public void Level1(); // poziomy w zamku, możliwość przełączania się między nimi...
public void Level2();




//////////////////////////////////////////////////////////
//Klasa główna Gra, Canvas-czyli jako okno

import java.awt.Canvas;
import javax.swing.JFrame;
import javax.swing.JPanel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.EventQueue;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.Graphics2D;
import java.awt.image.BufferStrategy;
import java.util.ArrayList;
import java.awt.event.KeyListener;
import java.awt.event.KeyEvent;
import java.awt.Rectangle;
import java.awt.Font;
import java.awt.image.BufferedImage;
import java.awt.TexturePaint;

public class Game extends Canvas implements Stage, KeyListener{

public long usedTime;  //zużyty czas, jakieś limity?
public BufferStrategy strategia;
private SpriteCache spriteCache; //praca na 'duszkach', ładowanie obrazków
private ArrayList actors;  //dodawanie jakis ruchomych rzeczy
private boolean gameEnded=false; //warunek sprawdzający czy nie zakończyć gry
private boolean wygrana=false;  //jakiś warunek sprawdzający czy bitwa została wygrana
private BufferedImage tło; //grafika tła
private int level;  //poziom na którym jesteśmy

public Game() {    //coś tam, żeby się w ogóle wyświetliło
spriteCache = new SpriteCache();
JFrame okno = new JFrame(".: NASZA_GRA_RPG :.");    //napis u góry na okienku
JPanel panel = (JPanel)okno.getContentPane();
setBounds(0,0,Stage.SZEROKOSC,Stage.WYSOKOSC);
panel.setPreferredSize(new Dimension(Stage.SZEROKOSC,Stage.WYSOKOSC));
panel.setLayout(null);
panel.add(this);
okno.setBounds(0,0,Stage.SZEROKOSC,Stage.WYSOKOSC);
okno.setVisible(true);
okno.addWindowListener( new WindowAdapter() {
public void windowClosing(WindowEvent e) {
System.exit(0);
}
});
okno.setResizable(false);  //nie zmieniać wielkośći okna
createBufferStrategy(2);
strategia = getBufferStrategy();
requestFocus();
addKeyListener(this);
}


public void initWorld() {     //dodanie jakiś elementów w świecie, np. wojowników 
actors = new ArrayList();
//np. Wojownik w = new Wojownik (this);
//jakieś warunki jego pojawienia, pozycja
}
public void paintWorld() {      //rysowanie świata
Graphics2D g = (Graphics2D)strategia.getDrawGraphics();
tło = spriteCache.getSprite("tło.jpg");
g.setPaint(new TexturePaint(tło, new
Rectangle(0,t,tło.getWidth(),tło.getHeight())));
g.fillRect(0,0,getWidth(),getHeight());


for (int i = 0; i < actors.size(); i++) {
Actor m = (Actor)actors.get(i);
m.paint(g);
	}

strategia.show();
}

public void addActor(Actor a) {   	//dodawanie ruchomych elementow
actors.add(a);
}

public SpriteCache getSpriteCache() {
return spriteCache;
}

public void updateWorld() {
//odświeżenie świata, wprowadzenie zmian, ruch jednostek
}


/////////////////////////////////////////////////////////////

//wczytywanie obrazkow

import java.awt.image.BufferedImage;
import java.net.URL;
import java.util.HashMap;
import javax.imageio.ImageIO;


public class SpriteCache {
public HashMap sprites;
public SpriteCache() {
sprites = new HashMap();
}
private BufferedImage loadImage(String sciezka) {
URL url=null;
try {
url = getClass().getClassLoader().getResource(sciezka);
return ImageIO.read(url);
} catch (Exception e) {
System.out.println("Przy otwieraniu " + sciezka +" jako " + url);
System.out.println("Wystapil blad : "+e.getClass().getName()+""+e.getMessage());
System.exit(0);
return null;
}
}
public BufferedImage getSprite(String sciezka) {
BufferedImage img = (BufferedImage)sprites.get(sciezka);
if (img == null) {
img = loadImage("img/"+sciezka);
sprites.put(sciezka,img);
}
return img;
}
}

/////////////////////////////////////////////////
// klasa aktor którą będą rozszerzac elementy np takie jak wojownik

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.awt.Rectangle;


public class Actor {
protected int x,y;
protected int width, height;
protected String spriteName;
protected Stage stage;
protected SpriteCache spriteCache;
protected int currentFrame;
protected String[] spriteNames;
protected int frameSpeed;
protected int t;
protected boolean markedForRemoval;
public Rectangle getBounds() {
return new Rectangle(x,y,width,height);
}
public void collision(Actor a){}

public void remove() {
markedForRemoval = true;
}
public boolean isMarkedForRemoval() {
return markedForRemoval;
}



public Actor(Stage stage) {
this.stage = stage;
spriteCache = stage.getSpriteCache();
currentFrame = 0;
frameSpeed = 1;
t=0;
}
public int getFrameSpeed() {return frameSpeed; }
public void setFrameSpeed(int i) {frameSpeed = i; }


public void paint(Graphics2D g){
g.drawImage( spriteCache.getSprite(spriteNames[currentFrame]), x,y, stage );
}
public int getX() { return x; }
public void setX(int i) { x = i; }
public int getY() { return y; }
public void setY(int i) { y = i; }
public String getSpriteName() { return spriteName; }
public void setSpriteNames(String[] names) {
spriteNames = names;
height = 0;
width = 0;
for (int i = 0; i < names.length; i++ ) {
BufferedImage image = spriteCache.getSprite(spriteNames[i]);
height = Math.max(height,image.getHeight());
width = Math.max(width,image.getWidth());
}
}

public int getHeight() { return height; }
public int getWidth() { return width; }
public void setHeight(int i) {height = i; }
public void setWidth(int i) { width = i; }
public void act() {
t++;
if (t % frameSpeed == 0){
t=0;
currentFrame = (currentFrame + 1) % spriteNames.length;
}
}
}







